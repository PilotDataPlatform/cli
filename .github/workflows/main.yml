# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  extract-branch-name:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{steps.extract_branch.outputs.branch}}
    steps:
      - name: Extract Branch Name
        id: extract_branch
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"

  build:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          pip install -U pip
          poetry install --no-interaction --no-root

  linter:
    needs: build
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - uses: actions/cache@v2
      id: cached-poetry-dependencies
      with:
        path: .venv
        key: venv-${{ hashFiles('**/poetry.lock') }}
    - name: Install pre-commit
      run: |
        source .venv/bin/activate
        export PATH=$PATH:/root/.local/bin
        pip3 install pre_commit
        python3 -m pre_commit install
    - name: flake8
      run: |
        source .venv/bin/activate
        python3 -m pre_commit run flake8 --all-files
    - name: isort
      run: |
        source .venv/bin/activate
        python3 -m pre_commit run isort --all-files
  tests:
    needs: build
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - uses: actions/cache@v2
      id: cached-poetry-dependencies
      with:
        path: .venv
        key: venv-${{ hashFiles('**/poetry.lock') }}
    - name: Run tests
      run: |
        source .venv/bin/activate
        PYTHONPATH=. pytest -c tests/pytest.ini -vvv --cov=app --cov-report term-missing --cov-report=xml --disable-warnings
    - name: Upload coverage
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  push-binary:
    needs: [tests, linter, extract-branch-name]
    if: ${{ needs.extract-branch-name.outputs.branch == 'main' }}
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - uses: actions/cache@v2
      id: cached-poetry-dependencies
      with:
        path: .venv
        key: venv-${{ hashFiles('**/poetry.lock') }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
    - name: build binary
      run: |
        source .venv/bin/activate
        pyinstaller -F --distpath ./app/bundled_app/linux --specpath ./app/build/linux --workpath ./app/build/linux --paths=./.venv/lib/python3.9/site-packages ./app/pilotcli.py -n pilotcli
    - name: Set version in env
      run: |
        source .venv/bin/activate
        echo "TAG_VERSION=`poetry version --short`" >> $GITHUB_ENV
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{env.TAG_VERSION}}
        release_name: Release ${{env.TAG_VERSION}}
        body: ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
    - name: Upload Release Binary
      id: upload-release-binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./app/bundled_app/linux/pilotcli
        asset_name: pilotcli
        asset_content_type: application/octet-stream
